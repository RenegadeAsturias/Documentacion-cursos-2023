
Apuntes-Angular. Curso Angular Trucos (LinkedIn Learning) (03/2023)

0.Introducción
1.Configuración y personalización del entorno de trabajo


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con herramientas de Chrome
-------------------------------------------------------------

#Asegurarse de que en fichero: tsconfig.json tenemos:

"compilerOptions": {
 ... ... ...,
 "sourceMap": true,

#Esto va a generar mapas dentro de nuestro código Javascript
#que nos van a permitir relacionar el TypeScript con el JavaScript
#Con nuestra aplicación levantada y funcionando
#y utilizando las herramientas de Chrome vamos a la pestaña Sources
#Buscar: webpack://
#Y todo lo que aparece dentro de la carpeta 'webpack'
#son los mapas relacionados con nuestro código en TypeScript
#Buscamos el componente: sin-estado.component.tsconfig
#dentro del fichero buscamos la función 'seleccionarItem()'
#que es la función que queremos depurar 
#en el código fuente añadimos breakpoints para hacer debug.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con Visual Studio
-------------------------------------------------------------

#Visual Studio Code nos ofrece toda una batería de herramientas
#para hacer depuración avanzada en nuestras aplicaciones Angular.
#Para activar esa depuración dentro de Visual Studio Code:

#1º Vamos a buscar en la sección de extensiones 
#una extesión llamada Debugger for Chrome
#Esta extesión nos va a permitir activar una sesión
#de depuración dentro de Chrome 

#2º También vamos a buscar dentro de los archivos e la aplicación
#el archivo 'tsconfig.json' y asegurarse que tenemos:
"compilerOptions": {
 ... ... ...,
 "sourceMap": true, #Debe estar a true

#Es importante porque esto nos va a permitir conectar
#el código que está en TypeScript
#que es el código que está en nuestra aplicación
#en nuestro entorno de trabajo
#con el código que está en JavaScript
#que es el que va a estar compilado dentro del navegador

#3º Inicializamos la sesión de depuración
#Al lado izquierdo de la aplicación buscamos la sección
#de "debug" y vamos a presionar el botón de "play"
#que dice 'Start Debugging'
#Nos aparecen dos diferentes entornos de desarrollo

#El primero: 'Chrome' es el que se activa
#a partir de la extensión que acabamos de instalar
#Y seleccionamos ese.
#Esto nos va a generar un archivo llamado 'launch.json'
#que se va a almacenar dentro de una carpeta: '.vscode'
#Aquí se va a guardar la configuración que se va a definir para depurar.
#En el código vamos modificando:
... ... ... ...
"configurations": [{
	"type":"chrome",
	"request":"launch",
	"name":"Angular", .................#configuramos un nombre, por ejemplo: Angular
	"url":"http://localhost:4200", ....#Configuramos el puerto : 4200
	"webRoot":"${workspaceFolder}"
}]

#4º Pasos para depurar:
#4.1 Arrancar la aplicación de Angular
#4.2 Ir a la sección "Debug"
#4.3 Hacer clic en el botón de play que ahora se llama 'Angular'
#4.4 Esto abre una ventana de Chrome que va a estar en modo depuración

#5º Ahora vamos a depurar un elemento de código:
#Buscamos el componente: sin-estado.component.tsconfig
#dentro del fichero buscamos la función 'seleccionarItem()'
#que es la función que queremos depurar 
#en el código fuente añadimos breakpoints para hacer debug.

#6º En la sección de Debug, en el panel de la izquierda
#Vemos en recuadro de VARIABLES
#cómo van cambiando los valores de las variables
#y de los objetos según avanzamos en el debug.

#7º En la zona inferior también tenemos:
#DEBUG CONSOLE
#Desde donde podemos ejecutar comandos
#Por ejemplo, yo puedo llamar a:
$ this.disabled
> true
#O, también llamar a:
$ this.seleccionarItem()
> nos devulve la respuesta del método.

#Así podemos realizar depuración avanzada
#con nuestras aplicaciones utilizando Visual Studio


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con Augury
-------------------------------------------------------------

#Augury es un plugin de Chrome que nos permite
#realizar depuración de nuestras aplicaciones
#Podemos examinar valores e incluso inspeccionar 
#diferentes cambios dentro de nuestras aplicaciones.

#Vamos a ver cómo utilizarlo:
#Primero hay que descargalo desde: https://augury.rangle.io/
#[Install on Chrome | Install on Firefox]
#Lo instalamos en Chrome
#Arrancamos nuestra aplicación con ng serve
#Y mientras vemos nuestra aplicación desplegada en el navegador
#Utilizamos las herramientas de Chrome y hacemos inspeccionar
#Ahora buscamos una nueva pestaña que tenemos: Augury

#Se muestra un mensaje que dice que la aplicación está funcionando
#en modo producción y por tanto no puede ser inspeccionada por Augury

#Cuando nosotros queremos ejecutar una aplicación en Augury
#tiene obligatoriamente que estar en modo de desarrollo.
#¿Cómo ponemos el modo de desarrollo?

#Vamos a la aplicación y abrimos el fichero: environment.tsconfig
export const environment = {
	production: true
};

#Generalmente cuando estás trabajando en una aplicación 
#el modo de producción por defecto va a tener el valor de 'false'

#Cambiamos el valor y lo ponemos en modo 'desarrollo'
export const environment = {
	production: false
};

#Ahora volvemos al navegador y a la pestaña Augury
#donde podemos ver un árbol con nuestros componentes,
#accesos a los valores, etc


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con NgProbe
-------------------------------------------------------------

#Vamos a ver un método muy sencillo para depurar 
#tus aplicaciones Angular desde la consola del navegador.
#Hemos creado una aplicación nueva de ejemplo y
#la desplegamos en el navegador
#tiene dos componentes y cada uno de ellos tiene un botón
#Abrimos las herramientas del Chrome y vamos a la pestaña Console

#En este punto podemos llamar a algunos comandos especiales de Angular.

#Por ejemplo, tenemos acceso a un objeto expuesto que se llama 'ng'.
#Lo escribimos en la consola y vemos que está presente
#y tiene una serie de diferentes elementos
#Pero aún no lo podemos utilizar, tenemos que realizar
#un proceso un poco común.

#En las herramientas de Chrome abrimos la pestaña 'Elementos' y vemos:
<app-mi-componente ...></app-mi-componente>
<app-segundo-componente ...></app-segundo-componente>

#Seleccionamos el primer componente:
<app-mi-componente ...></app-mi-componente>
#y al seleccionarlo aparece un texto que dice: ==$0
#Esto acaba de generar una instancia para conectar Angular con ese valor
#Anotamos ese valor y dejamos seleccionado el elemento en la pestaña Elementos

#Ahora volvemos a la consola y escribimos:
$ ng.probe($0)

#Esto nos conecta con el elemento que está activo y
#al presionar Enter, podemos ver las propiedades del primer componente

#Para ejecutar un debug más profundo, ejecutamos:
$ ng.probe($0).componentInstance

#Y nos muestra el valor de una variable que habíamos
#definido y utilizado dentro de nuestro componente
> MiComponenteComponent {valorA: "prueba"}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+Auditoría de dependencias con Bundle Analyzer
-------------------------------------------------------------

#Las dependencias permiten expandir el uso de nuestra aplicación
#Simplemente tenemos que inyectar una librería externa
#y podemos incorporar nuevas funcionalidades complejas.
#Sin embargo esto, tiene un coste porque puede hacer
#que nuestra aplicación extienda demasiado su tamaño.

#Vamos a ver una herramienta para monitorear 
#el tamaño y el impacto de las dependencias que estamos importando.

#Si abrimos el archivo: package.json
#Vamos a encontrar una sección llamada dependencias
#y es donde están todas las librerías que estamos utilizando
#dentro de nuestra aplicación

"dependecies": {
	"@angular/animations": "8.2.0",
	"@angular/common": "8.2.0",
	"@angular/compiler": "8.2.0",
	"@angular/core": "8.2.0",
... ... ... ... ... ...

#Vamos a instalar un módulo que nos va a permitir analizar
#el peso de estas dependencias a través del comando
$ npm install webpack-bundle-analyzer -D 

#Con el parámetro -D se instala en -modo desarrollador
#y se incluye en la sección: "devDependencies" { ...

#Vamos a seguir modificando el fichero: package.json
#nos vamos a la sección de scripts
#para incluir dos nuevas tareas

#La 1ª tarea que va compilar mi aplicación en modo de producción
#y de paso, va a incorporar las estadísticas que vamos a necesitar
#para evaluar todos los paquetes que están instalados
"scripts": {
	"buildstats": "ng build --stats-json",


#La 2ª tarea va a analizar los archivos
#que generamos en la primera tarea.
#LLamaremos a "webpack-bundle-analyzer" que es la herramienta
#que previamente instalamos y vamos a llamar a un archivo
#dist/<<nombreProyecto>>/stats-es5.json
"scripts": {
	"analizar": "webpack-bundle-analyzer dist/<<nombreProyecto>>/stats-es5.json",

#Ejecutamos la pimera tarea:
$ npm run buildstats

#Esto va a generar las estadísticas, las analíticas,
#del peso que tienen todoas las dependencias ("dependencies")
#y el impacto que tienen dentro de nuestra aplicación

#Una vez ejecutada la tarea se habrá creado una nueva carpeta
#/dist/componentesAvanzado/
#y dentro de ella vamos a encontrar un archivo: stats-es5.json

#Ahora que ya tenemos listo el archivo donde vamos a analizar
#vamos a ejecutar la segunta tarea con el nombre 'analizar'
$ npm run analizar

#Esto va a activar un servidor en la ruta 127.0.0.1
#en el puerto 888
#Vamos a examinar qué es lo que está desplegándose en ese puerto
#Abrimos esa ruta en el navegador: http://127.0.0.1:888
#Y vamos a encontrar el resultado del análisis del archivo que tenemos
#Nos vamos a encontrar todos los paquetes
#que están instalados dentro de nuestra aplicación


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Enrutado por defecto de Angular
-------------------------------------------------------------

#El "lazy loading" o "carga perezosa" o mejor dicho carga dinámica
#es una técnica que tenemos dentro de Angular para hacer una carga progresiva
#en nuestras aplicaciones vamos a mostrar como crear una aplicación
#utilizando el enrutado para luego poder configurarla
#como una aplicación con "lazy loading"

#Para crear una aplicación con soporte con enrutado
#vamos a la terminal y ejecutamos
$ ng new lazy

#Y seleccionamos: Would you like to add Angular routing? y (yes)

#El lazy loading nos permite ir creando una aplicación que va a 
#cargar los contenidos únicamente cuando el usuario lo necesita
#Pensemos por ejemplo en una aplicación con cinco secciones diferentes
#En la arquitectura tradicional de Angular vamos a cargar
#inmediatamente la cinco secciones.
#Mientras que utilizando lazy loading y así si el usuario
#solo visita una sección solo cargamos esa sección.

#En la aplicación que hemos creado tenemos el siguiente archivo:
> src > app > app-routing.module.ts

#1º Tenemos la importación del módulo de enrutado de Angular

import {Routes, RouterModule } from '@angular/router';

#2º También estamos definiendo una variable 
#donde podemos almacenar nuestras diferentes rutas

const routes: Routes = [];

#Esto está exportando una clase llamada 'AppRoutingModule'

@NgModule({
	imports: [RouterModule.forRoot(routes)],
	exports: [RouterModule]
})
export class AppRoutingModule { }

#y esta clase se importa dentro del Módulo principal de nuestra aplicación:
> src > app > app.module.ts

@NgModule({
	declarations [ AppComponent ],
	imports: [ 
		BrowserModule,
		AppRoutingModule
	],
... ... ... ...

#Y así se están inyectando las diferentes rutas de nuestra aplicación

#¿Cómo se muestran las rutas en una aplicación?
> src > index.html

#Tenemos una etiqueta llamada:
<app-root></app-root>

#Esto significa que lo primero que va a hacer nuestra aplicación
#es cargar una aplicación raíz
#Entonces, examinamos esa aplicación raíz que va a ser:
> src > app > app.component.ts

#Y en en el fichero:
> src > app > app.component.html
#Tenemos el código de la página que viene con el código por defecto.
#Justo al final de todo el código html tenemos las siguientes etiquetas:
<router-outlet></router-outlet>

#Y aquí se está cargando nuestro enrutado entonces podríamos
#tener un encabezado común para toda la aplicación parecido a:
<h1>ENCABEZADO</h1>

#Y dentro de esta etiqueta es donde se van cargando los diferentes elementos
<router-outlet></router-outlet>

#Así que los contenidos que aparezcan debajo del encabezado
#van a depender de acuerdo a la ruta 

#LA DESCRIPCIÓN DE LA ARQUITECTURA SERÍA ENTONCES:

#1º Entramos en el index.html que carga la aplicación principal
<body>
	<app-root></app-root>
</body>

#2º Y la aplicación pricipal en app.component.html
#muestra cualquier contenido que nosotros definamos
#y una sección donde se van a ir cargando los diferentes contenedores.
<h1>ENCABEZADO</h1>
<router-outlet></router-outlet>

#3º Lo que podemos hace con 'lazy loading'
#es utilizar un método dinámico para ir cargando progresivamente 
#los diferentes componentes que vamos necesitando
#justamente en esta etiqueta.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Agregar rutas a un proyecto Angular
-------------------------------------------------------------

#Vamos a aprender cómo incluir enrutado dentro de una aplicación Angular
#Nuestra aplicación tiene habilitado por defecto el soporte 
#para el enrutado en Angular (add Angular routing? y)

#Vamos a ir al fichero:
> src > app > app-routing.module.ts

#Donde se encuentra un array el cuál nos a permitir incluir diferentes rutas.
#Vamos a crear tres rutas diferentes.

#Previamente creamos un primer componente: 
$ ng generate component primero

#Creamos un segundo componente utilizando una sintaxis simplificada:
$ ng g c segundo

#Creamos un tercer componente
$ ng g c tercero

#De momento tenemos en nuestra aplicación tres componentes
#diferentes pero ninguno de ellos se está desplegando
#Vamos a relacionar estos componentes para que se conviertan
#más que en parte de la aplicación, se conviertan en pantallas 
#que se van a desplegar dependiendo de la ruta
#en la que se encuentre el usuario.

#Dentro del fichero: app-routing.module.ts
#vamos a crear en el array 'routes' un objeto
#que vamos a configurar para que tenga los valores
de una vista y específicamente nos muestre una ruta

#Para definir la ruta por defecto ponemos:
const routes: Routes = [
	{app:'', component: PrimeroComponent }  // Se importa automáticamente el componente
];

#Vamos a crear una segunda y tercera ruta, con rutas específicas:
const routes: Routes = [
	{app:'', component: PrimeroComponent },
	{app:'segundo', component: SegundoComponent },
	{app:'tercero', component: TerceroComponent },
];

#Dependiendo de en la ruta en la que estemos vamos a inyectar
#en la etiqueta <router-outlet></router-outlet>
#el componente que hemos definido en el array.

#Probamos que cuando entramos por primera vez a:
> http://localhost:4200
#Se muestra el texto del primer componente:
> primero works!
#Esto significa que estamos cargando el primer componente

#Ahora en la url del navegador ponemos:
> http://localhost:4200/segundo
#Se muestra el texto del segundo componente:
> segundo works!
#Esto significa que estamos cargando el segundo componente

#Ahora en la url del navegador ponemos:
> http://localhost:4200/tercero
#Se muestra el texto del tercer componente:
> tercero works!
#Esto significa que estamos cargando el tercer componente

#Así estamos realizando una carga dinámica de componentes
#de acuerdo a la ruta en la que nos encontramos.

