
Curso Angular de cero a experto (Udemy - Fernado Herrera) (27-03-2023)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
-------------------------------------------------------------

1.Introducción
2.¿Cómo funciona el curso?
3.¿Cómo hacer preguntas?

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
4.Instalaciones necesarias y recomendadas
-------------------------------------------------------------

+[Google Chrome]+[Visual Studio Code]+[Postman]+[Mongo Compass]
+[Git]+[Crear cuenta en GitHub]+[Node]
$ git config --global user.name "Tu nombre"
$ git config --global user.email "Tu correo"

-Extensiones de VSCode
+Activitus Bar
+Bracket Pair Colorizer 2

-Tema que estoy utilizando en VSCode
+Monokai Night
+Material Icon Theme (Philipp Kief)

Instalaciones recomendadas sobre Angular
+Angular Snipets (Angular 10 Snippets) (Mikael Morlund)
+Angular Languge Service (Angular) 
+Angular Inline (angular2-inline) (Nate Wallace)
+Auto Close Tag (Auto Close Tag) (Jun Han)
+TypeScript importer (pmneo)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
5.Nota de actualización - Versión node recomendada
-------------------------------------------------------------

Actualmente para Angular CLI 14 se recomienda la versión de node 16.10.0.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
6.Instalar AngularCLI
-------------------------------------------------------------

$ npm install -g @angular/cli (Run as administrator)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
7.Introducción a la sección
-------------------------------------------------------------

Angular libera una versión nueva cada 6 meses.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
8.Temas puntuales de la sección
-------------------------------------------------------------

Este es un breve listado de los temas fundamentales:

1.- Generalidades de TypeScript
2.- ¿Por qué Angular usa TypeScript?
3.- Mitos y realidades de Angular

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
9.¿Qué es TypeScript? y ¿Por qué Angular usa TypeScript?
-------------------------------------------------------------

TypeScript viene a ser un súper set de JavaScript, ese estándar que nosotros conocemos
pero se conoce como un súper set porque es básicamente el mismo JavaScript
pero le extiende características pero también tiene otras cosas que son propias
de TypeScript que no existen en JavaScript, mejorando o expandiendo aún más
ese lenguaje de programación.

+TypeScript es un super set de JavaScript

+Ofrece tipado esctricto y flexible
que nos ayuda a saber cómo funcionan las cosas.

+Mejora enormemente la legibilidad del código.

+Nos permite usar características más modernas.

Código de ejemplo de una función en JavaScript:

function calculaISV (productos) {
	let total = 0;
	productos.forEach( ({precio}) => {
		total+=precio;
	});
	return [total, total*0.15];
}

Vista en TypeScript:

function calculaISV (productos: Producto[]): [number,number] {
	let total = 0;
	productos.forEach( ({precio}) => {
		total+=precio;
	});
	return [total, total*0.15];
}

Definimos Producto como:

interface Producto {
	desc: string;
	precio: number;
}


¿Por qué Angular utiliza TypeScript?

+(1) La primera razón es para tener todos los beneficios de TypeScript.

Otras tecnologías como React, Deno, Node, Vue... entre otro
montón de tecnologías también tienen sus versiones basadas en TypeScript.
Básicamente porque todo lo que hacemos en JavaScript lo puedes hacer
en TypeScript para tener todos sus beneficios.

A partir de una clase en TypeScript como por ejemplo:

class Persona {
	nombre: string;
	edad: number;
	constructor() { }
}

A partir de las clases podremos construir también:

class ProductosComponent {}
class ProductosService	 {}
class ProductosDirective {}
class ProductosPipe	{}

Donde todo es literalmente la misma clase.

Y todo esto es algo que TypeScript le habilitó a Angular
gracias a los decoradores.

Los decoradores es un concepto propio y exclusivo de TypeScript por ahora.

Pero los decoradores te van a permitir o le permiten a Angular
poder diferenciar cada una de esas clases para que sea de algún tipo especial.

No es algo complicado, pero al principio los decoradores tienden a asustar
porque son un poco raros, 

+(2) Tenemos la ayuda y un intellisense fuerte.

+(3) Tenemos tipado estricto y menos errores en momento de escritura.

+(4) Nos permite la inyección de depedencias.
Que nos permitirá acceder a ciertos objetos rápidamente en cualquier clase,
sin tener que irte a un árbol de componentes, 
sin tener que irte a buscar en un montón de archivos dónde se encuentra.
lo que tú necesitas. Simplemente dices 'lo necesito' y lo utilizas.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
10. 10 Mitos y realidades de Angular
-------------------------------------------------------------

01. Angular es mejor que React, Vue y Svelte. (Mito)
02. Angular es más ordenado que React, Vue y Svelte. (Mito)
03. Angular es complicado de aprender. (Mito)
04. Angular libera nuevas versiones a cada rato. (Verdad)
05. Las aplicaciones de Angular son muy pesadas. (Mito)
06. Angular no es SEO Friendly. (Mito)
07. Angular no soporta diferentes patrones com Redux. (Mito)
08. Angular 2,4,5,6,7,8,9,10,11,12... es el mismo Angular. (Verdad)
09. Solo puedo correr código de TypeScript en mis aplicaciones de Angular. (Mito)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
11. Introducción a la sección
-------------------------------------------------------------

+Bases de TypeScript que veremos en la sección:
Decoradores, clases, funciones, tipado estricto...
Reconocer las características propias de TypeScript vs Angular.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
12. Temas puntuales de la sección
-------------------------------------------------------------

1. Introducción a TypeScript
1.1 Tipos básicos
1.2 Objetos, arreglos e interfaces
1.3 Funciones y sus argumentos
1.4 Desestructuración de arreglos y objetos
1.5 Importaciones y exportaciones
1.6 Clases, constructores
1.7 Tipos genéricos
1.8 Decoradores
1.9 Encadenamiento opcional

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
13. Notas antes de empezar
-------------------------------------------------------------

Una alternativa para la introducción de TypeScript, 
es que sigan los videos con este editor de TypeScript en la web, 
y así no instalamos nada en nuestra computadora.
Introducción TypeScript - Web
https://stackblitz.com/edit/typescript-vxnz8z?file=index.ts

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
14. Inicio de proyecto - Introducción a TypeScript
-------------------------------------------------------------

Nos descargamos una aplicación inicial de partida que viene adjunta en los recursos.
La abrimos con VSCode e iniciamos con:
$ nmp install 
para descargarnos todas las librerías del proyecto.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
15. Tipos básicos y conceptos generales
-------------------------------------------------------------

// Código de Typescript: 01-tipos-basicos.ts

let nombre: string = 'René';
const nick = 'Renegade';
let puntosVida: number = 95;

let puntosVidaPro: number | string = 95;
puntosVidaPro = 'FULL';

let estaVivo: boolean = true;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
16. Objetos, arreglos e interfaces
-------------------------------------------------------------

// Código de Typescript: 02-arrays-objetos-interfaces.ts

// Este Array acepta todos los tipos
let habilidadesEjemplo: any[] = [1, 'René', true, [], {}];

let habilidadesEjemplo2: string[] = ['Uno','Dos','Tres'];

// Error, no puedes asignarle un número. Argument of type 'number' is not assignable to parameter of type 'string'.
// habilidades.push(1); 

// Error, no puedes asignarle un boolean. Argument of type 'boolean' is not assignable to parameter of type 'string'.
// habilidades.push(true);

let habilidadesEjemplo3: (string|number)[] = ['Uno','Dos','Tres', 99];

habilidadesEjemplo3.push(55);
habilidadesEjemplo3.push('Cuatro');

interface Personaje {
    nombre: string;
    puntosVida: number;
    habilidades: string[];
	puebloNatal?: string;
}

// Objeto
let personaje: Personaje = {
    nombre: 'Batman',
    puntosVida: 100,
    habilidades: ['Golpe','Contraataque','Curación']
}

personaje.puebloNatal = 'Gijón';

console.table(personaje);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
17. Funciones básicas
-------------------------------------------------------------

// Código de Typescript: 03-funciones-basicas.ts

function sumar(a: number, b: number): number {
	return a + b;
}

const sumarFlecha = (a: number, b: number): number => {
    return a + b;
}

function multiplicar(numero: number, otroNumero: number, base: number): number {
    return numero * base;
}

// El segundo parámetro es opcional y el tercer parámtro siempre es 2.
function multiplicar(numero: number, otroNumero?: number, base: number = 2): number {
    return numero * base;
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
18. Funciones con objetos como argumentos
-------------------------------------------------------------

// Código de Typescript: 04-funciones-con-objetos-como-argumentos.ts

interface PersonajeLOR {
    nombre: string;
    pv: number;
    mostrarHp: () => void;    
}

function curar( personaje: PersonajeLOR, curarX: number): void {
	personaje.pv += curarX;
    console.log(personaje);
}

const nuevoPersonaje: PersonajeLOR = {
    nombre: 'Strider',
    pv: 50,
	mostrarHp() {
		console.log('Puntos de vida:', this.pv);
	}
}

curar( nuevoPersonaje, 20);
nuevoPersonaje.mostrarHp();


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
19. Tarea sobre objetos e interfaces
-------------------------------------------------------------

// Código de Typescript: 05-tarea-tipado.ts

interface SuperHeroe {
    nombre: string;
    edad: number;
    direccion: Direccion;
    mostrarDireccion: () => string;
}

interface Direccion {
    calle: string;
    pais: string;
    ciudad: string;
}

const superHeroe: SuperHeroe = {
	nombre: 'Spiderman',
	edad: 30,
	direccion: {
		calle: 'Main St',
		pais: 'USA',
		ciudad: 'NY'
	},
	mostrarDireccion() {
		return this.nombre + ', ' + this.direccion.ciudad + ', ' + this.direccion.pais;
	}
}

const direccion = superHeroe.mostrarDireccion();
console.log(direccion); // Mostraría: Spiderman, NY, USA


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
20. Desestructuración de Objetos
-------------------------------------------------------------


// Código de Typescript: 06-desestructuracion-objetos.ts

interface Reproductor {
    volumen: number;
    segundo: number;
    cancion: string;
    detalles: Detalles;
}

interface Detalles {
    autor: string;
    anio: number;
}

const reproductor: Reproductor = {
    volumen: 90,
    segundo: 36,
    cancion: 'Mess',
    detalles: {
        autor: 'Ed Sheeran',
        anio: 2015
    }
}

console.log('El volumen actual de: ', reproductor.volumen);
console.log('El segundo actual de: ', reproductor.segundo);
console.log('La canción actual de: ', reproductor.cancion);
console.log('El autor es: ', reproductor.detalles.autor);

// Aplicamos Desestructuración de objetos:
// Desestructuración es extraer directamente ciertas propiedades
// que nos interesan de un objeto y crear variables.

const { volumen, segundo, cancion, detalles } = reproductor;
const { autor } = detalles;

// Otra opción menos recomendada porque es más difícil de leer es:
// const { volumen, segundo, cancion, detalles: { autor } } = reproductor;
// 'autor' en este caso, no es un objeto, es una propiedad
//  y podría chocar con otra propidad definida, en ese caso podemos definirlo como:
// const { volumen, segundo, cancion, detalles: { autor: autorDetalle } } = reproductor;

// En nuestra opción favorita, también podemos poner un alias a la propiedad:
// const { volumen: vol, segundo, cancion, detalles } = reproductor;

console.log('El volumen actual de: ', volumen);
console.log('El segundo actual de: ', segundo);
console.log('La canción actual de: ', cancion);
console.log('El autor es: ', autor);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
21. Desestructuración de Arrays
-------------------------------------------------------------

// Código de Typescript: 07-desestructuracion-arrays.ts

const dias: string[] = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];

console.log('Día 1:' + dias[0]);
console.log('Día 2:' + dias[2]);
console.log('Día 3:' + dias[3]);

// Aplicamos Desestructuración de arrays:
// Desestructuración es extraer directamente ciertas propiedades
// que nos interesan de un array y crear variables.

// Ojo! que la desestructuración es por posición:
const dias: string[] = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];
const [ d1, d2, d3, d4, d5 ] = dias;

console.log('Día 1:' + d1);
console.log('Día 2:' + d2);
console.log('Día 3:' + d3);

// Si solo quisiésemos el quinto elemento y los demás no nos interesan sería:
const [ , , , , d5 ] = dias;
console.log('Día 5:' + d5);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
22. Desestructuración de Argumentos
-------------------------------------------------------------

// Código de Typescript: 08-desestructuracion-funcion.ts

interface Producto {
    desc: string;
    precio: number;
}

const telefono: Producto = {
    desc: 'Nokia A1',
    precio: 150
}

const tableta: Producto = {
    desc: 'iPad Air',
    precio: 350
}

function calculaImpuestoSobreVenta(productos: Producto[]): number {
    let total = 0;
     productos.forEach( (producto) => {
        total += producto.precio;
   })
    return total*0.15;
}

const productos = [telefono, tableta];

const impuestoSobreVenta = calculaImpuestoSobreVenta(productos);
console.log('ISV='+impuestoSobreVenta);


// Aplicamos Desestructuración de Argumentos sobre:
productos.forEach( (producto) => {
	total += producto.precio;
})

// Y lo podríamos cambiar por { precio } 
// porque es realmente lo que me interesa:
productos.forEach( ({ precio }) => {
    total += precio;
})

// Ahora aplicamos otro posible cambio:
function calculaImpuestoSobreVentaEj(productos: Producto[]): [number, number] {
    let total = 0;
     productos.forEach( ({precio}) => {
        total += precio;
   })
    return [total, total*0.15];
}

// Y ahora le aplico la Desestructuración sobre el resultado:

const [total, isv] = calculaImpuestoSobreVentaEj(productos);
console.log('Total='+total);
console.log('ISV='+isv);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
23. Importaciones y exportaciones
-------------------------------------------------------------

// Código de Typescript: 09-imports-exports.ts

Cuando intentamos utilizar en otro fichero de TypeScript lo siguiente
debería darnos error porque no tenemos definida la interface Producto
para ello deberíamos de importarla aunque previamente en el archivo
donde fue definida deberíamos exportarla para exponerla al resto de fichero:

------ uno.ts ---------
export interface Producto {
    desc: string;
    precio: number;
}

------ dos.ts ---------

// Ojo, que la estamos desestructurando
import { Producto } from './uno.ts';

const carritoCompras: Producto[] = [];

***********************************************

Definimos un array de productos, por ejemplo:

const carritoCompras: Producto[] = [
	{
		desc: 'Telefono 1',
		precio: 100
	},
	{
		desc: 'Telefono 2',
		precio: 150
	},
];

const [total, isv] = calculaImpuestoSobreVentaEj(productos);
console.log('Total='+total);
console.log('ISV='+isv);

// Esto que hemos hecho nos daría error porque no encuentra
// la función porque previamente hay que exportarla:

export function calculaImpuestoSobreVentaEj(productos: Producto[]): [number, number] {

// Ahora lo importamos, por ejemplo:

import { Producto, calculaImpuestoSobreVentaEj } from './uno.ts';


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
24. Clases básicas
-------------------------------------------------------------

// Código de Typescript: 10-clases-basicas.ts

class Heroe {
	private alterEgo: string;
	public edad: number;
	static nombreReal: string;
}

// Podemos acceder a una variable estática desde la Clase sin crear una instancia
Heroe.nombreReal;

// Creamos una instancia:
const ironman = new Heroe();
ironman.edad; // Solo vemos 'edad' porque es pública
// Diferencias entre Interface y Clase que parecen iguales:

interface Personaje {
	alterEgo: string;
	edad: number;
	nombreReal: string;
}

class Heroe {
	alterEgo: string;
	edad: number;
	nombreReal: string;
}

(1) La primera diferencia es que las Interfaces no existen
en JavaScript y cuando se transpila a JavaScript no se crea.

(2) Las Clases me permiten crear instancias como:
const ironman = new Heroe();

(3) En las interfaces no se implementan los métodos.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
25. Constructor de una clase
-------------------------------------------------------------

// Código de Typescript: 11-constructor-clases.ts

// Ejemplo: 
class Heroe {
	alterEgo: string;
	edad: number;
	nombreReal: string;
	
	constructor(alterEgo: string) {
		this.alterEgo = alterEgo;
	}
}

// Hay una nueva forma de definir las propiedades
// de la clase utilizando el constructor, por ejemplo:

class Heroe {
	constructor(
		public alterEgo: string,
		public edad?: number,
		public nombreReal?: string,
	) {}
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
26. Extender una clase
-------------------------------------------------------------

// Código de Typescript: 12-extender-clases.ts

// Creamos una nueva clase
class PersonaNormal {
	constructor(public nombre: string, public direccion: string) {}
}

class Heroe extends PersonaNormal {
	constructor(
		public alterEgo: string,
		public edad: number,
		public nombreReal: string,
	) {
		// Hay que llamar al super, constructor de la clase que se extiende
		super(nombreReal, 'New York, USA');
	}
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
27. Genéricos
-------------------------------------------------------------

// Código de Typescript: 13-genericos.ts

function queTipoSoy<T>(argumento: <T>) {
	return argumento;
}

let soyString = queTipoSoy('Hola Mundo');
let soyNumero = queTipoSoy(100);
let soyArray  = queTipoSoy( [1,2,3,4,5,6,7] );

let soyExplicito = queTipoSoy<number>(100);


function queTipoSoy<T>(argumento: <T>) {
	T prueba = obtenerObj();
	return argumento;
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
28. Decoradores de clases
-------------------------------------------------------------

// Código de Typescript: 13-decoradores.ts

Generalmente los decoradores sirven para cambiar las clases
en el momento en que son definidas, de esta forma,
cuando sea Angular o cualquier otra tecnología que use estos decoradores
en el momento en que esté compilando, luego traduciéndolo a otra cosa,
entonces va a extenderle internamente esas funcionalidades
que nosotros queremos implementar.

En Angular casi todo está basado en Clases pero lo que varía es el decorador.
Un decorador no es más que una función.

function classDecorator<T extends { new (...args: any[]): {} }>(
	constructor: T
	) {
		return class extends constructor {
			newProperty = "new property";
			hello = "override";
		};
	}

@classDecorator
class MiSuperClase {
	public miPropiedad: string = 'ABC123';
	imprimir() {
		console.log('Hola Mundo');
	}
}

Hacemos una prueba y ejecutamos:
console.log(MiSuperClase);

Esto imprime los detalles de MiSuperClase pero no muestra nada sobre
miPropiedad ni el método imprimir
porque esos detalles aparecen cuando se crean las instancias.
Este decorador trabaja a un nivel antes que la creación de una nueva instancia.

Ahora creamos la instancia:

const miClase = newMiSuperClase();
console.log(miClase.miPropiedad);

Y ya se muestra miPropiedad y el método imprimir.

Los decoradores sirven para expandir o añadir funcionalidades
y Angular los utiliza mucho para poder diferenciar
si esta clase es un Componente, o si es un Pipe, o si es una Directiva
o si esta clase es cualquier otra cosa en Angular
entonces Angular fácilmente puede reconocer a la hora de transpilar esto.
Y si por ejemplo esto es un Componente va a funcionar como un Componente,
esto es un Servicio entonces va a funcionar como un Servicio

En resumen un decorador no es más que una función que expande
su clase añadiéndole funcionalidades especiales.
Y esto es todo lo que necesitamos saber de los decoradores.
Y no vamos a crear decoradores personalizados, no nos va a hacer falta.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
29. Encadenamiento opcional
-------------------------------------------------------------

// Código de Typescript: 14-optional-chaining.ts

Interface Pasajero {
	nombre: string;
	hijos?: string[]; // Aquí la '?' indica que la propiedad es opcional
}

const pasajero1: Pasajero = {
	nombre: 'Fernando'
}

const pasajero2: Pasajero = {
	nombre: 'Melissa',
	hijos: ['Natalia','Gabriel']
}

function imprimeHijos(pasajero: Pasajero): void {
	const cuantosHijos = pasajero.hijos.length;
	console.log(cuantosHijos);
}

imprimeHijos(pasajero2); // Esto imprime 2.

imprimeHijos(pasajero1); // Esto imprime Error!

Uncaught TypeError: Cannot read property 'length' of undefined
Porque la propiedad 'pasajero1.hijos' es undefined
Es un error títipo de JavaScript.

Si cambiamos la asignación de la variable y le ponemos una '?'
le estamos pidiendo a JavaScript que trate de continuar la expresión con '.length' 
si es posible y la propiedad 'hijos' tiene valor y no es undefined.

const cuantosHijos = pasajero.hijos?.length;

como la propiedad 'hijos' es undefined no es posible continuar evaluando la expresión
Y el resultado mostrado es undefined.

Como la idea es que nos devuelva un valor pondremos:
const cuantosHijos = pasajero.hijos?.length || 0;

De esta forma si la propiedad 'hijos' es null o undefined nos devolverá 0.

Esto es el encadenamiento opcional
que intente hacer lo que sigue, siempre y cuando sea seguro hacerlo también.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
30. Código fuente de la sección
-------------------------------------------------------------

Incluye un resurso con el código fuente de los ejercicios del curso
Y también un enlace para acceder al proyecto en un repositorio de GitHub:
https://github.com/Klerith/curso-angular-intro-typescript-ecmascript


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
31. Introducción a la sección
32. Temas puntuales de la sección
-------------------------------------------------------------

Este es un breve listado de los temas fundamentales:
1.-Crear proyectos de Angular
2.-Explicar cada archivo y directorio de un proyecto
3.-Componentes
4.-Módulos
5.-One way data binding
6.-Uso del AngularCLI - Angular Command Line Interface
7.-Directivas creadas por Angular
8.-ngIf y ngIf-else
9.-Y más...


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
33. Introducción a Angular
-------------------------------------------------------------

+Es un marco de trabajo estandarizado.
+Viene con todo lo que necesitas para trabajar.
+Es modular.
+Google es quien le da mantenimiento hoy en día.

Bloques fundamentales de Angular:
(1) Componentes
(2) Rutas
(3) Directivas
(4) Servicios
(5) Módulos


----------------- Detalles ----------------------------

(1) Componente: HTML + Clase TypeScript que tiene un Decorador
Se busca que los componentes sean bloques pequeños de código y lo más simples posibles.

(2) Servicios
Los Servicios son lugares centralizados de información.

(3) Directivas

(3.1) Directivas de Componentes.
Las directivas de componentes básicamente es muy parecido a un componentes
sólo que tiene un pedazo de código HTML reutilizables, el cuál ya viene como conectado.
Es decir, colocas la directiva y ya crea ese HTML con cierta funcionalidad integrada
y eso es muy útil.

(3.2) Directivas Estructurales.
Las directivas estructurales modifican el DOM o el HTML, 
ya sea añadiendo elementos o eliminando elementos.

(3.3) Directivas de Atributos.
Las directivas de atributos básicamente cambian la apariencia o el comportamiento
de un elemento, otro componente o bien una directiva.

(4) Rutas
Mostrar diferentes componentes basados en la URL del Navegador Web.

(5) Módulos
Permiten agrupar todo lo que hemos hablado
(1) Componentes / (2) Servicios / (3) Directivas / (4) Rutas
inclusive otros módulos.

Por ejemplo:
-Módulo de Autenticación
-Módulo de Productos
-Módulo de Clientes
-Módulo de Proveedores


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
34. Crear un proyecto en Angular
-------------------------------------------------------------

ng new 0011-curso-angular-fh-bases (Routing=N+CSS)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
35. Nota de actualización
-------------------------------------------------------------

Nota: En la estructura del proyecto creado en la sección anterior-
ya no trae TSLint, este fue deprecado. 
Si quieren usar un linter, actualmente pueden usar ESLint.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
36. Explicación de cada archivo del proyecto
-------------------------------------------------------------

Estructura del proyecto de Angular:

+tsconfig.json
*************************************************************
Es el archivo de configuración de TypeScript.
Básicamente le dice a TypeScript cómo quiere que se traduzca a JavaScript
o cómo quiere que funcione TypeScript en este proyecto.


+tsconfig.spect.json
*************************************************************
Extiende el archivo: './tsconfig.json' y le añade funcionalidades
o características adicionales.
Y un '.spect' es lo que está reclacionado a la parte de las pruebas.


+tsconfig.spect.json
*************************************************************
Extiende el archivo: './tsconfig.json'
nuevamente extiende de la configuración y está enfocado propiamente en su aplicación.


+README.md
*************************************************************
Habla brevemente de cómo se creó esta aplicación.


+package.json
*************************************************************
Es un archivo delicado y no deberíamos hacer cambios manualmente en este archivo.
Si queremos añadir algo por ejemplo un nuevo paquete tenemos hacer algo en particular
como añadir o eliminar cosas usualmente lo vamos a hacer mediante comandos.


+package-lock.json
*************************************************************
Este fichero tampoco lo vamos a modificar manualmente.
En este archivo básicamente dice como se construyó los módulos del proyecto
y cómo se construyó todo.


+karma.conf.js
*************************************************************
El karma config son las configuraciones para las pruebas unitarias
sin integración basadas en karma.
No se va a cubrir la parte de pruebas en este curso.


+angular.json
*************************************************************
Es un archivo importante praa nuestra aplicación, el cuál contiene
configuraciones importantes para nuestra aplicación.
Entre ellas están los assets que son los recursos estáticos:
"assets": [
	"src/favicon.icon",
	"src/assets"
]


+.gitignore
*************************************************************
Donde están los archivos que no quiero que Git le de seguimiento
de mi proyecto.


+.editorconfig
*************************************************************
Incluye reglas que vienen para diferentes archivos.


+carpeta: src
*************************************************************
Que veremos en la siguiente lección.


+carpeta: node_modules
*************************************************************
La carpeta con los módulos de Node que contiene una gran cantidad de módulos.
Aquí hay muchas cosas que si van a la aplicación de producción
y hay otras cosas que no.


+carpeta: e2e (end to end testing)
*************************************************************
No se va a cubrir la parte de pruebas en este curso.



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
37. Explicación de cada archivo -Parte 2 del proyecto
-------------------------------------------------------------

Explicación de los archivos dentro del SRC:

src > app > app.component.html
borrar todo y sustituir por <h1>Hola Mundo!</h1>

----------Componente--------------
El componente de mi aplicación y el punto inicial de la aplicación
-app.component.css  // Son estilos encapsulados para 'app.component.html'
-app.component.html
-app.component.spec.ts
-app.component.ts
-----------------------------------

Módulos que componen nuestra aplicación:
-app.module.ts

Los assets son utilizados para colocar recursos estáticos en nuestra aplicación
src > assets

En los dos archivos de 'environments' angular de manera automática nos permite
tener un lugar para nuestras variables de entorno ya sea de desarrollo y de producción

src > environments > environments.ts  		// Entorno desarrollo
src > environments > environments.prod.ts   // Entorno producción

src > favicon.ico
src > index.html   // Página HTML principal

El archivo 'main.ts' nunca se toca y ayuda básicamentea decirle a Angular
el ambiente en el que está corriendo y depende del target de la aplicación Angular.
src > main.ts

El archivo 'polyfills.ts' ayuda para tener una mayor compatibilidad con
otros navegadores web y en principio no es necesario tocarlo nunca.
src > polyfills.ts

El archivo 'styles.css' es un archivo de estitos global de la aplicación.
src > styles.css

El archivo 'test.ts' para la configuración de nuestro ambiente de pruebas
src > test.ts


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
38. App Component
-------------------------------------------------------------

Utilizaremos estos estilos disponibles en GitHub y lo pegamos en nuestro
fichero de estilos global: src > styles.css
https://gist.github.com/Klerith/3ddee04a27c09be05e888d5d4ac1d09f


Analizamos el fichero 'app.component.ts'
y que existe la posiblidad de poner
-'template:' un template e indicar el html como valor
-'templateUrl:' e indicar la ruta del template

Y también cambiamos el valor de la variable 'titulo' por 'Contador App'

--------------app.component.ts-------------------------
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  titulo = 'Contador App';
}

Y en el fichero 'app.component.html' añadimos '{{titulo}}'
y vemos que podemos imprimir código de las propiedades de la clase en el HTML
--------------app.component.html-------------------------
<h1>{{titulo}}</h1>

Dentro de las dobles llaves {{ <Expresión JavaScript> }}
podemos escribir cuaquier expresión JavaScript, por ejemplo:
<h1>{{1+1}}</h1>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
39. Contador App
-------------------------------------------------------------

Para hacer nuestro contador hacemos los siguientes cambios:

--------------app.component.ts-------------------------
export class AppComponent {
  titulo: string = 'Contador App';
  numero: number = 10;
}

--------------app.component.html-------------------------
<h1>{{titulo}}</h1>
<button> + 1</button>
<span> {{ numero }} </span>
<button> - 1</button>

Ahora definimos los eventos para incrementar y decrementar el contador.
Los eventos son definidos con paréntesis y luego se escribe el nombre del evento
y entre comillas va la expresión JavaScript que queremos ejecutar.

<button (click)="numero=numero+1;" > + 1</button>
<span> {{ numero }} </span>
<button (click)="numero=numero-1;" > - 1</button>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 4: Introducción a Angular 
40. Métodos en el componente
-------------------------------------------------------------

Vamos a cambiar las expresiones JavaScript desde el template
por un método en el componente:

--------------app.component.html-------------------------
<h1>{{titulo}}</h1>
<button (click)="acumular(1)" > + 1</button>
<span> {{ numero }} </span>
<button (click)="acumular(-1)" > - 1</button>










