
Apuntes-Angular. Curso Angular Trucos (LinkedIn Learning) (03/2023)

0.Introducción
1.Configuración y personalización del entorno de trabajo


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con herramientas de Chrome
-------------------------------------------------------------

#Asegurarse de que en fichero: tsconfig.json tenemos:

"compilerOptions": {
 ... ... ...,
 "sourceMap": true,

#Esto va a generar mapas dentro de nuestro código Javascript
#que nos van a permitir relacionar el TypeScript con el JavaScript
#Con nuestra aplicación levantada y funcionando
#y utilizando las herramientas de Chrome vamos a la pestaña Sources
#Buscar: webpack://
#Y todo lo que aparece dentro de la carpeta 'webpack'
#son los mapas relacionados con nuestro código en TypeScript
#Buscamos el componente: sin-estado.component.tsconfig
#dentro del fichero buscamos la función 'seleccionarItem()'
#que es la función que queremos depurar 
#en el código fuente añadimos breakpoints para hacer debug.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con Visual Studio
-------------------------------------------------------------

#Visual Studio Code nos ofrece toda una batería de herramientas
#para hacer depuración avanzada en nuestras aplicaciones Angular.
#Para activar esa depuración dentro de Visual Studio Code:

#1º Vamos a buscar en la sección de extensiones 
#una extesión llamada Debugger for Chrome
#Esta extesión nos va a permitir activar una sesión
#de depuración dentro de Chrome 

#2º También vamos a buscar dentro de los archivos e la aplicación
#el archivo 'tsconfig.json' y asegurarse que tenemos:
"compilerOptions": {
 ... ... ...,
 "sourceMap": true, #Debe estar a true

#Es importante porque esto nos va a permitir conectar
#el código que está en TypeScript
#que es el código que está en nuestra aplicación
#en nuestro entorno de trabajo
#con el código que está en JavaScript
#que es el que va a estar compilado dentro del navegador

#3º Inicializamos la sesión de depuración
#Al lado izquierdo de la aplicación buscamos la sección
#de "debug" y vamos a presionar el botón de "play"
#que dice 'Start Debugging'
#Nos aparecen dos diferentes entornos de desarrollo

#El primero: 'Chrome' es el que se activa
#a partir de la extensión que acabamos de instalar
#Y seleccionamos ese.
#Esto nos va a generar un archivo llamado 'launch.json'
#que se va a almacenar dentro de una carpeta: '.vscode'
#Aquí se va a guardar la configuración que se va a definir para depurar.
#En el código vamos modificando:
... ... ... ...
"configurations": [{
	"type":"chrome",
	"request":"launch",
	"name":"Angular", .................#configuramos un nombre, por ejemplo: Angular
	"url":"http://localhost:4200", ....#Configuramos el puerto : 4200
	"webRoot":"${workspaceFolder}"
}]

#4º Pasos para depurar:
#4.1 Arrancar la aplicación de Angular
#4.2 Ir a la sección "Debug"
#4.3 Hacer clic en el botón de play que ahora se llama 'Angular'
#4.4 Esto abre una ventana de Chrome que va a estar en modo depuración

#5º Ahora vamos a depurar un elemento de código:
#Buscamos el componente: sin-estado.component.tsconfig
#dentro del fichero buscamos la función 'seleccionarItem()'
#que es la función que queremos depurar 
#en el código fuente añadimos breakpoints para hacer debug.

#6º En la sección de Debug, en el panel de la izquierda
#Vemos en recuadro de VARIABLES
#cómo van cambiando los valores de las variables
#y de los objetos según avanzamos en el debug.

#7º En la zona inferior también tenemos:
#DEBUG CONSOLE
#Desde donde podemos ejecutar comandos
#Por ejemplo, yo puedo llamar a:
$ this.disabled
> true
#O, también llamar a:
$ this.seleccionarItem()
> nos devulve la respuesta del método.

#Así podemos realizar depuración avanzada
#con nuestras aplicaciones utilizando Visual Studio


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con Augury
-------------------------------------------------------------

#Augury es un plugin de Chrome que nos permite
#realizar depuración de nuestras aplicaciones
#Podemos examinar valores e incluso inspeccionar 
#diferentes cambios dentro de nuestras aplicaciones.

#Vamos a ver cómo utilizarlo:
#Primero hay que descargalo desde: https://augury.rangle.io/
#[Install on Chrome | Install on Firefox]
#Lo instalamos en Chrome
#Arrancamos nuestra aplicación con ng serve
#Y mientras vemos nuestra aplicación desplegada en el navegador
#Utilizamos las herramientas de Chrome y hacemos inspeccionar
#Ahora buscamos una nueva pestaña que tenemos: Augury

#Se muestra un mensaje que dice que la aplicación está funcionando
#en modo producción y por tanto no puede ser inspeccionada por Augury

#Cuando nosotros queremos ejecutar una aplicación en Augury
#tiene obligatoriamente que estar en modo de desarrollo.
#¿Cómo ponemos el modo de desarrollo?

#Vamos a la aplicación y abrimos el fichero: environment.tsconfig
export const environment = {
	production: true
};

#Generalmente cuando estás trabajando en una aplicación 
#el modo de producción por defecto va a tener el valor de 'false'

#Cambiamos el valor y lo ponemos en modo 'desarrollo'
export const environment = {
	production: false
};

#Ahora volvemos al navegador y a la pestaña Augury
#donde podemos ver un árbol con nuestros componentes,
#accesos a los valores, etc


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+La depuración con NgProbe
-------------------------------------------------------------

#Vamos a ver un método muy sencillo para depurar 
#tus aplicaciones Angular desde la consola del navegador.
#Hemos creado una aplicación nueva de ejemplo y
#la desplegamos en el navegador
#tiene dos componentes y cada uno de ellos tiene un botón
#Abrimos las herramientas del Chrome y vamos a la pestaña Console

#En este punto podemos llamar a algunos comandos especiales de Angular.

#Por ejemplo, tenemos acceso a un objeto expuesto que se llama 'ng'.
#Lo escribimos en la consola y vemos que está presente
#y tiene una serie de diferentes elementos
#Pero aún no lo podemos utilizar, tenemos que realizar
#un proceso un poco común.

#En las herramientas de Chrome abrimos la pestaña 'Elementos' y vemos:
<app-mi-componente ...></app-mi-componente>
<app-segundo-componente ...></app-segundo-componente>

#Seleccionamos el primer componente:
<app-mi-componente ...></app-mi-componente>
#y al seleccionarlo aparece un texto que dice: ==$0
#Esto acaba de generar una instancia para conectar Angular con ese valor
#Anotamos ese valor y dejamos seleccionado el elemento en la pestaña Elementos

#Ahora volvemos a la consola y escribimos:
$ ng.probe($0)

#Esto nos conecta con el elemento que está activo y
#al presionar Enter, podemos ver las propiedades del primer componente

#Para ejecutar un debug más profundo, ejecutamos:
$ ng.probe($0).componentInstance

#Y nos muestra el valor de una variable que habíamos
#definido y utilizado dentro de nuestro componente
> MiComponenteComponent {valorA: "prueba"}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
2. Depuración de aplicaciones
+Auditoría de dependencias con Bundle Analyzer
-------------------------------------------------------------

#Las dependencias permiten expandir el uso de nuestra aplicación
#Simplemente tenemos que inyectar una librería externa
#y podemos incorporar nuevas funcionalidades complejas.
#Sin embargo esto, tiene un coste porque puede hacer
#que nuestra aplicación extienda demasiado su tamaño.

#Vamos a ver una herramienta para monitorear 
#el tamaño y el impacto de las dependencias que estamos importando.

#Si abrimos el archivo: package.json
#Vamos a encontrar una sección llamada dependencias
#y es donde están todas las librerías que estamos utilizando
#dentro de nuestra aplicación

"dependecies": {
	"@angular/animations": "8.2.0",
	"@angular/common": "8.2.0",
	"@angular/compiler": "8.2.0",
	"@angular/core": "8.2.0",
... ... ... ... ... ...

#Vamos a instalar un módulo que nos va a permitir analizar
#el peso de estas dependencias a través del comando
$ npm install webpack-bundle-analyzer -D 

#Con el parámetro -D se instala en -modo desarrollador
#y se incluye en la sección: "devDependencies" { ...

#Vamos a seguir modificando el fichero: package.json
#nos vamos a la sección de scripts
#para incluir dos nuevas tareas

#La 1ª tarea que va compilar mi aplicación en modo de producción
#y de paso, va a incorporar las estadísticas que vamos a necesitar
#para evaluar todos los paquetes que están instalados
"scripts": {
	"buildstats": "ng build --stats-json",


#La 2ª tarea va a analizar los archivos
#que generamos en la primera tarea.
#LLamaremos a "webpack-bundle-analyzer" que es la herramienta
#que previamente instalamos y vamos a llamar a un archivo
#dist/<<nombreProyecto>>/stats-es5.json
"scripts": {
	"analizar": "webpack-bundle-analyzer dist/<<nombreProyecto>>/stats-es5.json",

#Ejecutamos la pimera tarea:
$ npm run buildstats

#Esto va a generar las estadísticas, las analíticas,
#del peso que tienen todoas las dependencias ("dependencies")
#y el impacto que tienen dentro de nuestra aplicación

#Una vez ejecutada la tarea se habrá creado una nueva carpeta
#/dist/componentesAvanzado/
#y dentro de ella vamos a encontrar un archivo: stats-es5.json

#Ahora que ya tenemos listo el archivo donde vamos a analizar
#vamos a ejecutar la segunta tarea con el nombre 'analizar'
$ npm run analizar

#Esto va a activar un servidor en la ruta 127.0.0.1
#en el puerto 888
#Vamos a examinar qué es lo que está desplegándose en ese puerto
#Abrimos esa ruta en el navegador: http://127.0.0.1:888
#Y vamos a encontrar el resultado del análisis del archivo que tenemos
#Nos vamos a encontrar todos los paquetes
#que están instalados dentro de nuestra aplicación


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Enrutado por defecto de Angular
-------------------------------------------------------------

#El "lazy loading" o "carga perezosa" o mejor dicho carga dinámica
#es una técnica que tenemos dentro de Angular para hacer una carga progresiva
#en nuestras aplicaciones vamos a mostrar como crear una aplicación
#utilizando el enrutado para luego poder configurarla
#como una aplicación con "lazy loading"

#Para crear una aplicación con soporte con enrutado
#vamos a la terminal y ejecutamos
$ ng new lazy

#Y seleccionamos: Would you like to add Angular routing? y (yes)

#El lazy loading nos permite ir creando una aplicación que va a 
#cargar los contenidos únicamente cuando el usuario lo necesita
#Pensemos por ejemplo en una aplicación con cinco secciones diferentes
#En la arquitectura tradicional de Angular vamos a cargar
#inmediatamente la cinco secciones.
#Mientras que utilizando lazy loading y así si el usuario
#solo visita una sección solo cargamos esa sección.

#En la aplicación que hemos creado tenemos el siguiente archivo:
> src > app > app-routing.module.ts

#1º Tenemos la importación del módulo de enrutado de Angular

import {Routes, RouterModule } from '@angular/router';

#2º También estamos definiendo una variable 
#donde podemos almacenar nuestras diferentes rutas

const routes: Routes = [];

#Esto está exportando una clase llamada 'AppRoutingModule'

@NgModule({
	imports: [RouterModule.forRoot(routes)],
	exports: [RouterModule]
})
export class AppRoutingModule { }

#y esta clase se importa dentro del Módulo principal de nuestra aplicación:
> src > app > app.module.ts

@NgModule({
	declarations [ AppComponent ],
	imports: [ 
		BrowserModule,
		AppRoutingModule
	],
... ... ... ...

#Y así se están inyectando las diferentes rutas de nuestra aplicación

#¿Cómo se muestran las rutas en una aplicación?
> src > index.html

#Tenemos una etiqueta llamada:
<app-root></app-root>

#Esto significa que lo primero que va a hacer nuestra aplicación
#es cargar una aplicación raíz
#Entonces, examinamos esa aplicación raíz que va a ser:
> src > app > app.component.ts

#Y en en el fichero:
> src > app > app.component.html
#Tenemos el código de la página que viene con el código por defecto.
#Justo al final de todo el código html tenemos las siguientes etiquetas:
<router-outlet></router-outlet>

#Y aquí se está cargando nuestro enrutado entonces podríamos
#tener un encabezado común para toda la aplicación parecido a:
<h1>ENCABEZADO</h1>

#Y dentro de esta etiqueta es donde se van cargando los diferentes elementos
<router-outlet></router-outlet>

#Así que los contenidos que aparezcan debajo del encabezado
#van a depender de acuerdo a la ruta 

#LA DESCRIPCIÓN DE LA ARQUITECTURA SERÍA ENTONCES:

#1º Entramos en el index.html que carga la aplicación principal
<body>
	<app-root></app-root>
</body>

#2º Y la aplicación pricipal en app.component.html
#muestra cualquier contenido que nosotros definamos
#y una sección donde se van a ir cargando los diferentes contenedores.
<h1>ENCABEZADO</h1>
<router-outlet></router-outlet>

#3º Lo que podemos hace con 'lazy loading'
#es utilizar un método dinámico para ir cargando progresivamente 
#los diferentes componentes que vamos necesitando
#justamente en esta etiqueta.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Agregar rutas a un proyecto Angular
-------------------------------------------------------------

#Vamos a aprender cómo incluir enrutado dentro de una aplicación Angular
#Nuestra aplicación tiene habilitado por defecto el soporte 
#para el enrutado en Angular (add Angular routing? y)

#Vamos a ir al fichero:
> src > app > app-routing.module.ts

#Donde se encuentra un array el cuál nos a permitir incluir diferentes rutas.
#Vamos a crear tres rutas diferentes.

#Previamente creamos un primer componente: 
$ ng generate component primero

#Creamos un segundo componente utilizando una sintaxis simplificada:
$ ng g c segundo

#Creamos un tercer componente
$ ng g c tercero

#De momento tenemos en nuestra aplicación tres componentes
#diferentes pero ninguno de ellos se está desplegando
#Vamos a relacionar estos componentes para que se conviertan
#más que en parte de la aplicación, se conviertan en pantallas 
#que se van a desplegar dependiendo de la ruta
#en la que se encuentre el usuario.

#Dentro del fichero: app-routing.module.ts
#vamos a crear en el array 'routes' un objeto
#que vamos a configurar para que tenga los valores
de una vista y específicamente nos muestre una ruta

#Para definir la ruta por defecto ponemos:
const routes: Routes = [
	{app:'', component: PrimeroComponent }  // Se importa automáticamente el componente
];

#Vamos a crear una segunda y tercera ruta, con rutas específicas:
const routes: Routes = [
	{app:'', component: PrimeroComponent },
	{app:'segundo', component: SegundoComponent },
	{app:'tercero', component: TerceroComponent },
];

#Dependiendo de en la ruta en la que estemos vamos a inyectar
#en la etiqueta <router-outlet></router-outlet>
#el componente que hemos definido en el array.

#Probamos que cuando entramos por primera vez a:
> http://localhost:4200
#Se muestra el texto del primer componente:
> primero works!
#Esto significa que estamos cargando el primer componente

#Ahora en la url del navegador ponemos:
> http://localhost:4200/segundo
#Se muestra el texto del segundo componente:
> segundo works!
#Esto significa que estamos cargando el segundo componente

#Ahora en la url del navegador ponemos:
> http://localhost:4200/tercero
#Se muestra el texto del tercer componente:
> tercero works!
#Esto significa que estamos cargando el tercer componente

#Así estamos realizando una carga dinámica de componentes
#de acuerdo a la ruta en la que nos encontramos.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Habilitar enlaces de enrutado para Angular
-------------------------------------------------------------

#Vamos a aprender ahora como incluir dentro de una plantilla
#los enlaces cuando estamos trabajando en una aplicación Angular.
#En la sección anterior vimos cómo incluir rutas al array 'routes'
#y navegávamos modificando la url del navegador
#Sin embargo, así no estamos utilizando realmente el enrutado.

#El enrutado de Angular necesita que lo llamemos desde la parte
#interna de nuestra aplicación para que se desplieguen 
#los contenidos correctamente.
#Porque cuando entramos dentro de las diferentes rutas utilizando
#únicamente la url lo que estamos haciendo realmente
#es actualizar la aplicación

#Para ver esto, vamos a las herramientas de Chrome
#a la pestaña de Network y en la url vamos a la página por defecto:
#http://localhost:4200
#y vemos que nos estamos descargando todos los archivos de la aplicación
#y si ahora vamos a una de las rutas: 
#http://localhost:4200/segundo
#vemos que se realiza de nuevo la descarga completa de los archivos.
#Realmente aquí no estamos utilizando Angular
#simplemente estamos aprovechando la capacidad que tiene 
#de desplegar contenidos cuando invocamos una ruta.
#Pero lo que necesitamos hacer es incluir el enrutado por enlaces.

#Vamos a la plantilla de nuestro componente principal
> src > app > app.component.html
#Y vamos a incluir un enrutado a través de enlaces

<nav>
	<a routerLink="/primero">Primero</a>
	<a routerLink="/segundo">Segundo</a>
	<a routerLink="/tercero">Tercero</a>
</nav>
<h1>LAZY LOADING</h1>
<router-outlet></router-outlet>

#Con estos cambios vamos a tener una barra de navegación
#bastante simple, donde tenemos Primero, Segundo y Tercero.

#Con este cambio ahora cuando navegamos por las opciones
#y vemos en la pestaña Network
#al navegar la primera vez a la ruta inicial se cargan todos los archivos
#pero cuando navegamos por las rutas utilizando los routerLinks
#solo se cargan los datos necesarios de cada sección para desplegar los datos.
#Como en el caso de los tres enlaces estamos utilizando la arquitectura
#regular de Angular, o sea, toda la aplicación ya está cargada
#entonces realmente no estamos cargando nada.

#Estamos repasando los enlaces y vemos que enlace 'primero'
#no funciona correctamente porque la definición de las rutas
#no está muy fina, vamos de nuevo al fichero donde se definen:
> scrc > app > app-routing.module.ts
#Y las modificamos así:

const routes: Routes = [
	{app:'primero', component: PrimeroComponent },
	{app:'segundo', component: SegundoComponent },
	{app:'tercero', component: TerceroComponent },
	
	#Con esta definición cuando el usuario solicite una ruta
	#no definida en las rutas definidas se le redirigirá
	#a la ruta definida 'primero':
	{app:'', redirectTo: 'primero', pathMatch: "full"},
];


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Configuración de módulos para lazy loading
-------------------------------------------------------------

#Vamos a crear un módulo nuevo que nos va a servir para poder
#habilitar las rutas dinámicas o sea el 'lazy loading'.
#La intención es crear una sección que, a su vez, 
#va a tener una serie de rutas.
#Pero esta rutas van a tener una carga dinámica o 'lazy loading'.

$ ng generate module productos
> src > app > productos > productos.module.ts

#Ahora vamos a crear tres componentes diferentes 
#Y estos componentes se van a encontrar dentro del módulo.
#Vamos a ver la sintaxis para crear subcomponentes
#En este caso vamos a crear diferentes productos, así que voy a crear,
#por ejemplo, dentro de la carpeta 'productos':

$ ng generate component productos/producto-uno
$ ng generate component productos/producto-dos
$ ng generate component productos/producto-tres

#Ahora tenemos:
> src > app > productos > productos.module.ts
> src > app > productos > producto-uno > producto-uno.component.css
> src > app > productos > producto-uno > producto-uno.component.html
> src > app > productos > producto-uno > producto-uno.component.ts
> src > app > productos > producto-dos > producto-dos.component.css
> src > app > productos > producto-dos > producto-dos.component.html
> src > app > productos > producto-dos > producto-dos.component.ts
> src > app > productos > producto-tres > producto-tres.component.css
> src > app > productos > producto-tres > producto-tres.component.html
> src > app > productos > producto-tres > producto-tres.component.ts

#Y ahora tenemos una aplicación que tiene un submódulo instalado
#y dentro de él tiene tres diferentes componentes
#que están relacionados específicamente a este módulo.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Creación de child routes para cargas dinámicas
-------------------------------------------------------------

#Vamos a ver cómo incorporar un módulo dentro de el enrutado de angular.
#Tenemos una aplicación que tiene un módulo llamado 'productos'
#y este módulo tiene a su vez tres diferentes componentes anidados.
#Estos componentes van a servir para generar 'lazy loading' o rutas dinámicas
#Vamos a incorporar este módulo dentro del enrutado general de la aplicación.

#Buscamos el archivo: 'app-routing.module.ts'
#Específicamente este módulo está pensado para desplegar productos,
#así que vamos a incluir una ruta adicional que va a ir acorde con este objetivo.

#Sobre: 'loadChildren': nos va a permitir instalar diferentes children o hijos
#que en este caso van a ser componentes del módulo en el que estamos trabajando.
#Así que para eso tenemos que instalar el componente padre

const routes: Routes = [
... ... ... ... ... ...
{ path:'productos',
  loadChildren: () => import('./productos/productos.module').then(m => m.ProductosModule) 
},

#En 'loadChildren' ejecutamos una promesa
#que estamos utilizando para importar el módulo 'productos'
#y específicamente el archivo que lo gestiona que es 'productos.module.ts'
#Una vez que hemos terminado de realizar este import como es una promesa
#vamos a ejecutar de manera asíncrona este módulo 'ProductosModule'.
#Así vamos a poder cargar dentro de esta ruta el módulo en el que estamos trabajando.

#En la carpeta:
> src > app > productos 
#Creamos un nuevo archivo: 'productos-routing.ts'
#Ahora tenemos:
> src > app > productos > productos.module.ts
> src > app > productos > productos-routing.ts

#Dentro de este archivo nosotros vamos a definir las rutas 
#que van a estar dentro del módulo
#Recordemos que hemos definido en la aplicación que 'productos'
#va a ser la ruta de nuestro módulo:
const routes: Routes = [
{ path:'productos',
  loadChildren: () => import('./productos/productos.module').then(m => m.ProductosModule) 
},

#Lo que vamos a producir ahora son las rutas que van a estar
#dentro de cualquier cosa donde aparezca 'productos'.
#Eso lo vamos a controlar desde el módulo 

#En el fichero: 'productos-routing.ts' tendremos:

import { ProductoUnoComponent }  from "./producto-uno/producto-uno.component";
import { ProductoDosComponent }  from "./producto-dos/producto-dos.component";
import { ProductoTresComponent } from "./producto-tres/producto-tres.component";

import { Routes } from "@angular/router";

#Estamos haciendo más rutas, pero estas rutas son rutas secundarias.
export const routes: Routes = [
	#De esta forma cuando el usuario entre a la raíz de 'productos' cargue 'ProductoUno'.
	{app:"", component: ProductoUnoComponent },
	
	#Cuando entre a 'producto-dos', o sea 'productos/producto-dos' cargue 'ProductoDos'.
	{app:"producto-dos",  component: ProductoDosComponent },
	
	#Cuando entre a 'producto-tres', o sea 'productos/producto-tres' cargue 'ProductoTres'.
	{app:"producto-tres", component: ProductoTresComponent },
];

#Nos falta un paso más. Vamos a 'productos.module'
#y tenemos que incluir en la sección de imports: 

import { RouterModule } from '@angular/router';
import { routes } from './productos.routing';

@NgModule({
	declarations: [ProductoUnoComponent, ProductoDosComponent, ProductoTresComponent],
	imports: [ 
		CommonModule,
		RouterModule.forChild(routes) -----> Ruta hija, anidada!!
	]

#Ya tenemos configuradas las rutas secundarias dentro de nuestra aplicación
#Y con esto tenemos habilitado en su forma más básica el 'lazy loading'.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
3. Angular y lazy loading
+Implementar lazy loading en una plantilla
-------------------------------------------------------------

#Vamos a ver cómo implementar la carga dinámica o 'lazy loading'
#dentro de una aplicación Angular.
#Nuestra aplicación anterior ya está utilizando 'lazy loading'.

#A nuestra lista implementada de rutas regulares
#dentro del enrutador de Angular en la plantilla:
<nav>
	<a routerLink="/primero">Primero</a>
	<a routerLink="/segundo">Segundo</a>
	<a routerLink="/tercero">Tercero</a>

#Ahora vamos a poner tres rutas más que están relacionadas
#directamente con los productos que tengo dentro del módulo dinámico:
	<a routerLink="/productos">Producto #1</a>
	<a routerLink="/productos/producto-dos">Producto #2</a>
	<a routerLink="/productos/producto-tres">Producto #3</a>

#Resolvemos la direncia entre los enrutados regulares
#y los enrutados con 'lazy loading'

#Volvemos a las herramientas de Chrome y vamos a la pestaña de Network
#para recordar que cuando se carga la aplicación por primera vez
#desde la ruta por defecto: http://localhost:4200
#se cargan todos los archivos de al aplicación
#y cuando navegamos por los componentes a los que apuntan
#las rutas regulares no se carga ya ningún componente
#porque todos estaban incluídos dentro de los componentes
#que se cargaron en la carga inicial.

#Sin embargo Produto #1, #2 y #3 están utilizando 'lazy loading'
#lo que significa que no se han cargado, 
#no existen dentro de mi aplicación y sólamente los vamos a cargar
#en el momento en que yo abra alguno de estos elementos 

#Por eso, cuando entra por primera vez en uno de los elementos,
#por ejemplo: Producto #2
#se carga el módulo correspondiente con toda la información:
> productos-productos-module.js
#Así es como nosotros estamos cargando los productos de forma dinámica.
#Nuestro módulo se activa solamente si lo necesitamos.
#Mientras que en el caso del primer formato se van a cargar
#siempre que el usuario entre en la aplicación.
#Ninguno de los dos es mejor que otro, 
#simplemente tienes que tenerlos en cuenta a la hora de desarrollar
#la arquitectura de tu aplicación según tus necesidades específicas.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. El formato PWA en Angular
+Auditoría e instalación de soporte PWA en Angular
-------------------------------------------------------------

#Una app PWA o 'Progressive Web App' es un tipo de aplicación pensado para trabajar
dentro de la web y ofrecernos la mejor experiencia posible.
#Es una aplicación que va a tener capacidades como ser progresiva, responsive y además
#adaptarse a las mejores condiciones como, por ejemplo, tener o no acceso a internet.
#Vamos a ver el soporte que tiene Angular para las 'progressive web apps'.
#Partimos de una aplicación Angular básica 
#Una ventaja que nos ofrece Chrome es que tiene una herramienta que nos permite
#verificar que tan acorde y qué tan adaptada está nuestra página para ser una PWA.
#En las herramientas de Chrome vamos a la pestaña Audits
#-Vamos a seleccionar la opción Device: Desktop
#-Vamos a marcar la opción Audits: Progressive Web App
#-Vamos a dejar la opción Throttling: Simulated Slow 4G, 4x CPU Slowdown
#-También vamos a dejar la opción: Clear storage
#Ejecutamos esta auditoría haciendo clic en el botón: Run audits
#y así ver el soporte que tiene de manera nativa
#una aplicación Angular para ser PWA

#Vemos entonces no tiene soporte y que realmente tenemos algunos problemas
#para poder desplegar las capacidades y las reglas básicas de este formato
#de aplicaciones web. Vamos a adaptar entonces nuestro proyecto.
#Vamos a ejecutar un par de comandos:

#1º Vamos a incluir el soporte para PWA
#Y esto va a instalar una serie de herramientas y también va a cambiar
#algunos formatos dentro de nuestros proyectos.
$ ng add @angular/pwa

#Ahora nuestro proyecto va a estar actualizado para tener soporte para ser
#una 'progressive web application'.
#Y ahora vamos a compilar nuestra aplicación en modo de producción
$ ng build --prod

#Esto va a producir nuestra aplicación ya compilada
#en el formato de producción y la vamos a encontrar en:
> dist > mi-aplicacion

#Aquí encontraremos una aplicación en formato HTML lita para ejecutarse
#con todos los elementos básicos y el formato necesario para funcionar
#como una 'progresiva web app'


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
4. El formato PWA en Angular
+Pruebas y solución de problemas comunes en PWA's de Angular
-------------------------------------------------------------

#Vamos a ver cómo ejecutar una aplicación PWA dentro de Angular.
#Partimos del ejemplo anterior y quisiera probarla dentro
#de mi sistema pero desgraciadamente no puedo abrir directamente el archivo: 
#'index.html' a menos que se encuentre en un formato de servidor
#Para probar ese formato de servidor, o sea, que mi aplicación
#se muestre como HTTP y no com File, vamos a incluir un servidor localhost
#Para eso vamos a ejecujutar el comando:

$ npm install -g http-server

#Esto nos permite acceder al comando global 'http-server'
#que nos va a permitir crear un servidor local en cualquier
#ubicación que nosotros definamos.
#Vamos entonces a utilizar este comando para crear 
#un servidor local ubicado y apuntando directamente a la carpeta
#donde hemos generado nuestro código compilado:

$ http-server -e-1 dist/mi-aplicacion

#Ahora tenemos disponible un servidor dentro de esta dirección:
> Available on:
> http://127.0.0.1:8080

#En la url del navegador ponemos:
> http://127.0.0.1:8080/index.html

#Esta es nuestra aplicación Angular en su formato de distribución final.
#Y ahora le hacemos la prueba para el soporte de PWA

#En las herramientas de Chrome vamos a la pestaña Audits
#-Vamos a seleccionar la opción Device: Desktop
#-Vamos a marcar la opción Audits: Progressive Web App
#-Vamos a dejar la opción Throttling: Simulated Slow 4G, 4x CPU Slowdown
#-También vamos a dejar la opción: Clear storage
#Ejecutamos esta auditoría haciendo clic en el botón: Run audits

#Y vemos la diferencia entre la aplicación antes de ejecutar el soporte,
#antes teníamos varios errores y ahora vemos que tenemos ya
#varios elementos funcionales. Sin embargo nos faltan dos: 

#Error#1: PWA Optimized: Does not direct HTTP traffic to HTTPS
#El primero no lo podemos arreglar porque no podemos enviar
#a tráfico HTTPS por el formato en que está nuestro servidor

#Error#2: Does not provide a valid apple-touch-icon
#El segundo dice que tenemos que mostrar soporte para apple-touch-icon 
#así que vamos a modificar ligeramente nuestra aplicación. Buscamos:
> dist > mi-aplicacion > index.html

#Dentro de este archivo vamos a incluir el soporte
#para los iconos de dispositivos 'touch'.
#Simplemente agregamos esta línea:
<link rel="apple-touch-icon" href="/assets/icons/icon-512x512.png" />

#Ya tenemos soporte para los dispositivos 'touch' de Apple.
#Reiniciamos y ejecutamos de nuevo la auditoría, borrando caché.
#Y ahora nos marca otro error:

#Error#3: Start_url does not respond with a 200 when offline
#Nos dice que deberíamos mostrar soporte para 'start_url'
#El asunto es que este servidor específicamente debería
#estar apuntando al index.html cuando entramos en la página inicial
#Para solucionarlo, buscamos el archivo:
> dist > mi-aplicacion > manifest.webmanifest

#Donde tenemos un parámetro: "start_url":"/",
#Lo modificamos por:
"start_url":"/index.html"

#Reiniciamos y ejecutamos de nuevo la auditoría, borrando caché.
#Y ya tenemos nuestra 'progressive wep app' funcionando correctamente.
#A excepción de la única prueba que no estamos aprobando es el 
#tráfico HTTPS porque el servidor en el que estamos no tiene soporte.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
5. Angular elements
+Preparación de un proyecto para Angular elements
-------------------------------------------------------------

#Los 'Angular elements' o elementos de angular son un elemento nuevo
#que puede cambiar completamente todo el concepto de cómo utilizamos Angular.
#Estos elementos nos permiten tomar una aplicación de angular 
#y empaquetarla en un solo componente y distribuirla en cualquier parte.

Los 'Angular elements' están basados en los 'Web components'
#que son elementos estándar de JavaScript.
#Dentro de los 'Web components' el concepto es que nosotros podemos utilizar pequeños bloques
#que son micro aplicaciones y que pueden ser incorporados dentro de cualquier sitio web.

#Esto quiere decir que si nosotros hacemos un 'Angular elements' podemos exportarlo
#para poder trabajar dentro, por ejemplo, una página htm estática 
#o dentro de una aplicación en WordPress o incluso dentro de React o dentro de Vue
#porque nuestro código va a estar completamente encapsulado 
#y solamente tenemos que llamar en unas cuantas líneas de código e incorporarlo 
#dentro de una aplicación sin necesidad de integrar el resto de elementos de Angular.

#Creamos una nueva aplicación de Angular para trabajar con 'Angular elements':
$ ng new elements

#Ejecutamos: $ ng serve y vamos a examinar la aplicación
#Y obtenemos la aplicación por defecto de Angular.

#Buscamos el archivo: app.component.html 
#borramos todo su contenido por defecto y lo sustituimos por el siguiente:

<div>
	<input  type="range" min="1" max="360" value="0" #miSlider
			(input)="onChange(miSlider.value)" />
	<div id="square" [ngStyle]="{ transform: miRotacion }"></div>
</div>

#Buscamos el archivo: app.component.css y añadimos los siguientes estilos:

height: 100px;
background: rgb(98, 8, 112);
background: linear-gradiente(0deg, rgba(98, 8, 112, 1) 0%, rgba(255, 0, 255, 1) 100%);

position: relative;
top:  34px
left: 72px


#Buscamos el archivo: app.component.ts 
#y agregamos los componentes que va a controlar mi aplicación:

export class AppComponent {
	constructor() {}
	miRotacion: string;
	ngOnInit() {
		this.miRotacion = `rotateZ(0deg)`;
	}
	onChange(valorSlider) {
		this.miRotacion = `rotateZ(${valorSlider}deg`;
	}
}

#En otras palabras, vamos a estar escuchando los valores del input Slider:
<input  type="range" min="1" max="360" value="0" #miSlider
	(input)="onChange(miSlider.value)" />

#Y cada vez que tengamos algún cambio vamos a enviar la información
#a nuestro método 'onChange' y este método va a modificar
#la posición en la que se encuentra este elemento.

#Mostramos la aplicación con los cambios y tenemos el 'Slider'
#El 'Slider' está escuchand un evento, 
#así que cada vez que lo modifiquemos va a afectar 
#a un elemento cuadrado y le va a modificar la propiedad rotación
#lo que significa que se va a mover. Efectivamente rota.

#Este es un componente muy simple pero lo que queremos demostrar
#es como este tipo de componentes lo podemos encapsular por completo
#y enviarlo a una aplicación que no tiene Angular del todo.
#Ahora que ya tenemos listo este proyecto podemose comenzar
#a transformarlo en un 'Angular component'




