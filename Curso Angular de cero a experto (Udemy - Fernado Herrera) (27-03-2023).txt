
Curso Angular de cero a experto (Udemy - Fernado Herrera) (27-03-2023)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
-------------------------------------------------------------

1.Introducción
2.¿Cómo funciona el curso?
3.¿Cómo hacer preguntas?

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
4.Instalaciones necesarias y recomendadas
-------------------------------------------------------------

+[Google Chrome]+[Visual Studio Code]+[Postman]+[Mongo Compass]
+[Git]+[Crear cuenta en GitHub]+[Node]
$ git config --global user.name "Tu nombre"
$ git config --global user.email "Tu correo"

-Extensiones de VSCode
+Activitus Bar
+Bracket Pair Colorizer 2

-Tema que estoy utilizando en VSCode
+Monokai Night
+Material Icon Theme (Philipp Kief)

Instalaciones recomendadas sobre Angular
+Angular Snipets (Angular 10 Snippets) (Mikael Morlund)
+Angular Languge Service (Angular) 
+Angular Inline (angular2-inline) (Nate Wallace)
+Auto Close Tag (Auto Close Tag) (Jun Han)
+TypeScript importer (pmneo)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
5.Nota de actualización - Versión node recomendada
-------------------------------------------------------------

Actualmente para Angular CLI 14 se recomienda la versión de node 16.10.0.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 1: Introducción al curso
6.Instalar AngularCLI
-------------------------------------------------------------

$ npm install -g @angular/cli (Run as administrator)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
7.Introducción a la sección
-------------------------------------------------------------

Angular libera una versión nueva cada 6 meses.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
8.Temas puntuales de la sección
-------------------------------------------------------------

Este es un breve listado de los temas fundamentales:

1.- Generalidades de TypeScript
2.- ¿Por qué Angular usa TypeScript?
3.- Mitos y realidades de Angular

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
9.¿Qué es TypeScript? y ¿Por qué Angular usa TypeScript?
-------------------------------------------------------------

TypeScript viene a ser un súper set de JavaScript, ese estándar que nosotros conocemos
pero se conoce como un súper set porque es básicamente el mismo JavaScript
pero le extiende características pero también tiene otras cosas que son propias
de TypeScript que no existen en JavaScript, mejorando o expandiendo aún más
ese lenguaje de programación.

+TypeScript es un super set de JavaScript

+Ofrece tipado esctricto y flexible
que nos ayuda a saber cómo funcionan las cosas.

+Mejora enormemente la legibilidad del código.

+Nos permite usar características más modernas.

Código de ejemplo de una función en JavaScript:

function calculaISV (productos) {
	let total = 0;
	productos.forEach( ({precio}) => {
		total+=precio;
	});
	return [total, total*0.15];
}

Vista en TypeScript:

function calculaISV (productos: Producto[]): [number,number] {
	let total = 0;
	productos.forEach( ({precio}) => {
		total+=precio;
	});
	return [total, total*0.15];
}

Definimos Producto como:

interface Producto {
	desc: string;
	precio: number;
}


¿Por qué Angular utiliza TypeScript?

+(1) La primera razón es para tener todos los beneficios de TypeScript.

Otras tecnologías como React, Deno, Node, Vue... entre otro
montón de tecnologías también tienen sus versiones basadas en TypeScript.
Básicamente porque todo lo que hacemos en JavaScript lo puedes hacer
en TypeScript para tener todos sus beneficios.

A partir de una clase en TypeScript como por ejemplo:

class Persona {
	nombre: string;
	edad: number;
	constructor() { }
}

A partir de las clases podremos construir también:

class ProductosComponent {}
class ProductosService	 {}
class ProductosDirective {}
class ProductosPipe	{}

Donde todo es literalmente la misma clase.

Y todo esto es algo que TypeScript le habilitó a Angular
gracias a los decoradores.

Los decoradores es un concepto propio y exclusivo de TypeScript por ahora.

Pero los decoradores te van a permitir o le permiten a Angular
poder diferenciar cada una de esas clases para que sea de algún tipo especial.

No es algo complicado, pero al principio los decoradores tienden a asustar
porque son un poco raros, 

+(2) Tenemos la ayuda y un intellisense fuerte.

+(3) Tenemos tipado estricto y menos errores en momento de escritura.

+(4) Nos permite la inyección de depedencias.
Que nos permitirá acceder a ciertos objetos rápidamente en cualquier clase,
sin tener que irte a un árbol de componentes, 
sin tener que irte a buscar en un montón de archivos dónde se encuentra.
lo que tú necesitas. Simplemente dices 'lo necesito' y lo utilizas.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 2: Conceptos generales para empezar con Angular y TypeScript
10. 10 Mitos y realidades de Angular
-------------------------------------------------------------

01. Angular es mejor que React, Vue y Svelte. (Mito)
02. Angular es más ordenado que React, Vue y Svelte. (Mito)
03. Angular es complicado de aprender. (Mito)
04. Angular libera nuevas versiones a cada rato. (Verdad)
05. Las aplicaciones de Angular son muy pesadas. (Mito)
06. Angular no es SEO Friendly. (Mito)
07. Angular no soporta diferentes patrones com Redux. (Mito)
08. Angular 2,4,5,6,7,8,9,10,11,12... es el mismo Angular. (Verdad)
09. Solo puedo correr código de TypeScript en mis aplicaciones de Angular. (Mito)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
11. Introducción a la sección
-------------------------------------------------------------

+Bases de TypeScript que veremos en la sección:
Decoradores, clases, funciones, tipado estricto...
Reconocer las características propias de TypeScript vs Angular.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
12. Temas puntuales de la sección
-------------------------------------------------------------

1. Introducción a TypeScript
1.1 Tipos básicos
1.2 Objetos, arreglos e interfaces
1.3 Funciones y sus argumentos
1.4 Desestructuración de arreglos y objetos
1.5 Importaciones y exportaciones
1.6 Clases, constructores
1.7 Tipos genéricos
1.8 Decoradores
1.9 Encadenamiento opcional

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
13. Notas antes de empezar
-------------------------------------------------------------

Una alternativa para la introducción de TypeScript, 
es que sigan los videos con este editor de TypeScript en la web, 
y así no instalamos nada en nuestra computadora.
Introducción TypeScript - Web
https://stackblitz.com/edit/typescript-vxnz8z?file=index.ts

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
14. Inicio de proyecto - Introducción a TypeScript
-------------------------------------------------------------

Nos descargamos una aplicación inicial de partida que viene adjunta en los recursos.
La abrimos con VSCode e iniciamos con:
$ nmp install 
para descargarnos todas las librerías del proyecto.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
15. Tipos básicos y conceptos generales
-------------------------------------------------------------

// Código de Typescript: 01-tipos-basicos.ts

let nombre: string = 'René';
const nick = 'Renegade';
let puntosVida: number = 95;

let puntosVidaPro: number | string = 95;
puntosVidaPro = 'FULL';

let estaVivo: boolean = true;


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
16. Objetos, arreglos e interfaces
-------------------------------------------------------------

// Código de Typescript: 02-arrays-objetos-interfaces.ts

// Este Array acepta todos los tipos
let habilidadesEjemplo: any[] = [1, 'René', true, [], {}];

let habilidadesEjemplo2: string[] = ['Uno','Dos','Tres'];

// Error, no puedes asignarle un número. Argument of type 'number' is not assignable to parameter of type 'string'.
// habilidades.push(1); 

// Error, no puedes asignarle un boolean. Argument of type 'boolean' is not assignable to parameter of type 'string'.
// habilidades.push(true);

let habilidadesEjemplo3: (string|number)[] = ['Uno','Dos','Tres', 99];

habilidadesEjemplo3.push(55);
habilidadesEjemplo3.push('Cuatro');

interface Personaje {
    nombre: string;
    puntosVida: number;
    habilidades: string[];
	puebloNatal?: string;
}

// Objeto
let personaje: Personaje = {
    nombre: 'Batman',
    puntosVida: 100,
    habilidades: ['Golpe','Contraataque','Curación']
}

personaje.puebloNatal = 'Gijón';

console.table(personaje);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
17. Funciones básicas
-------------------------------------------------------------

// Código de Typescript: 03-funciones-basicas.ts

function sumar(a: number, b: number): number {
	return a + b;
}

const sumarFlecha = (a: number, b: number): number => {
    return a + b;
}

function multiplicar(numero: number, otroNumero: number, base: number): number {
    return numero * base;
}

// El segundo parámetro es opcional y el tercer parámtro siempre es 2.
function multiplicar(numero: number, otroNumero?: number, base: number = 2): number {
    return numero * base;
}


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
18. Funciones con objetos como argumentos
-------------------------------------------------------------

// Código de Typescript: 04-funciones-con-objetos-como-argumentos.ts

interface PersonajeLOR {
    nombre: string;
    pv: number;
    mostrarHp: () => void;    
}

function curar( personaje: PersonajeLOR, curarX: number): void {
	personaje.pv += curarX;
    console.log(personaje);
}

const nuevoPersonaje: PersonajeLOR = {
    nombre: 'Strider',
    pv: 50,
	mostrarHp() {
		console.log('Puntos de vida:', this.pv);
	}
}

curar( nuevoPersonaje, 20);
nuevoPersonaje.mostrarHp();


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
19. Tarea sobre objetos e interfaces
-------------------------------------------------------------

// Código de Typescript: 05-tarea-tipado.ts

interface SuperHeroe {
    nombre: string;
    edad: number;
    direccion: Direccion;
    mostrarDireccion: () => string;
}

interface Direccion {
    calle: string;
    pais: string;
    ciudad: string;
}

const superHeroe: SuperHeroe = {
	nombre: 'Spiderman',
	edad: 30,
	direccion: {
		calle: 'Main St',
		pais: 'USA',
		ciudad: 'NY'
	},
	mostrarDireccion() {
		return this.nombre + ', ' + this.direccion.ciudad + ', ' + this.direccion.pais;
	}
}

const direccion = superHeroe.mostrarDireccion();
console.log(direccion); // Mostraría: Spiderman, NY, USA


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
20. Desestructuración de Objetos
-------------------------------------------------------------


// Código de Typescript: 06-desestructuracion-objetos.ts

interface Reproductor {
    volumen: number;
    segundo: number;
    cancion: string;
    detalles: Detalles;
}

interface Detalles {
    autor: string;
    anio: number;
}

const reproductor: Reproductor = {
    volumen: 90,
    segundo: 36,
    cancion: 'Mess',
    detalles: {
        autor: 'Ed Sheeran',
        anio: 2015
    }
}

console.log('El volumen actual de: ', reproductor.volumen);
console.log('El segundo actual de: ', reproductor.segundo);
console.log('La canción actual de: ', reproductor.cancion);
console.log('El autor es: ', reproductor.detalles.autor);

// Aplicamos Desestructuración de objetos:
// Desestructuración es extraer directamente ciertas propiedades
// que nos interesan de un objeto y crear variables.

const { volumen, segundo, cancion, detalles } = reproductor;
const { autor } = detalles;

// Otra opción menos recomendada porque es más difícil de leer es:
// const { volumen, segundo, cancion, detalles: { autor } } = reproductor;
// 'autor' en este caso, no es un objeto, es una propiedad
//  y podría chocar con otra propidad definida, en ese caso podemos definirlo como:
// const { volumen, segundo, cancion, detalles: { autor: autorDetalle } } = reproductor;

// En nuestra opción favorita, también podemos poner un alias a la propiedad:
// const { volumen: vol, segundo, cancion, detalles } = reproductor;

console.log('El volumen actual de: ', volumen);
console.log('El segundo actual de: ', segundo);
console.log('La canción actual de: ', cancion);
console.log('El autor es: ', autor);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
21. Desestructuración de Arrays
-------------------------------------------------------------

// Código de Typescript: 07-desestructuracion-arrays.ts

const dias: string[] = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];

console.log('Día 1:' + dias[0]);
console.log('Día 2:' + dias[2]);
console.log('Día 3:' + dias[3]);

// Aplicamos Desestructuración de arrays:
// Desestructuración es extraer directamente ciertas propiedades
// que nos interesan de un array y crear variables.

// Ojo! que la desestructuración es por posición:
const dias: string[] = ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'];
const [ d1, d2, d3, d4, d5 ] = dias;

console.log('Día 1:' + d1);
console.log('Día 2:' + d2);
console.log('Día 3:' + d3);

// Si solo quisiésemos el quinto elemento y los demás no nos interesan sería:
const [ , , , , d5 ] = dias;
console.log('Día 5:' + d5);


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sección 3: Base de TypeScript - Sección recomendada
22. Desestructuración de Argumentos
-------------------------------------------------------------

// Código de Typescript: 08-desestructuracion-funcion.ts

interface Producto {
    desc: string;
    precio: number;
}

const telefono: Producto = {
    desc: 'Nokia A1',
    precio: 150
}

const tableta: Producto = {
    desc: 'iPad Air',
    precio: 350
}

function calculaImpuestoSobreVenta(productos: Producto[]): number {
    let total = 0;
     productos.forEach( (producto) => {
        total += producto.precio;
   })
    return total*0.15;
}

const productos = [telefono, tableta];

const impuestoSobreVenta = calculaImpuestoSobreVenta(productos);
console.log('ISV='+impuestoSobreVenta);


// Aplicamos Desestructuración de Argumentos sobre:
productos.forEach( (producto) => {
	total += producto.precio;
})

// Y lo podríamos cambiar por { precio } 
// porque es realmente lo que me interesa:
productos.forEach( ({ precio }) => {
    total += precio;
})

// Ahora aplicamos otro posible cambio:
function calculaImpuestoSobreVentaEj(productos: Producto[]): [number, number] {
    let total = 0;
     productos.forEach( ({precio}) => {
        total += precio;
   })
    return [total, total*0.15];
}

// Y ahora le aplico la Desestructuración sobre el resultado:

const [total, isv] = calculaImpuestoSobreVentaEj(productos);
console.log('Total='+total);
console.log('ISV='+isv);












